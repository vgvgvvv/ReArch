<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ include file="../../Helpers.ttinclude" #>

using System;
using System.Runtime.CompilerServices;
using ReArch.Core.Utils;

namespace ReArch.Core;
public partial class World
{
    <#
    for (var index = 2; index <= Amount; index++)
    {
        var generics = AppendGenerics(index);
        var removes = new StringBuilder();
        var events = new StringBuilder();
        for (var i = 0; i < index; i++)
        {
            removes.AppendLine($"            spanBitSet.ClearBit(Component<T{i}>.ComponentType.Id);");
            events.AppendLine($"            OnComponentRemoved<T{i}>(entity);");
        }
    #>


	[SkipLocalsInit]
	[StructuralChange]
	public void Remove<<#= generics #>>(Entity entity)
<#
        for (var i = 0; i < index; i++)
        {
#>
        where T<#= i #> : unmanaged
<#
        }
#>
	{
		var oldArchetype = EntityInfo.GetArchetype(entity.Id);
		var signature = Component<<#= generics #>>.Signature;
		var newSignature = Signature.Remove(oldArchetype.Signature, signature);
		var newArchetype = GetOrCreateArchetype(newSignature);
		
		Move(entity, oldArchetype, newArchetype, out _);
	}

   
    <#
    }
    #>
}
