<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ include file="../Helpers.ttinclude" #>

using System;
using System.Runtime.CompilerServices;
using ReArch.Core.Utils;

namespace ReArch.Core;
public partial class Archetype
{

<#
    for (var index = 2; index <= Amount; index++)
    {
        var generics = AppendGenerics(index);
        var parameters = AppendGenericInDefaultParams(index, hasNullable:false);
        var insertParameters = InsertGenericInParams(index);
#>

    internal void SetRange<<#= generics #>>(in int fromIndex, in int toIndex,  <#= parameters #>)
<#
        for (var i = 0; i < index; i++)
        {
#>
        where T<#= i #> : unmanaged
<#
        }
#>
    {
<#
        for (var i = 0; i < index; i++)
        {
#>
        {
            var enumerator = GetComponents<T<#= i #>>().GetEnumerator(fromIndex, toIndex - fromIndex);
            do
            {
                enumerator.Current = t<#= i #>Component;
            } while (enumerator.MoveNext());
        }
<#
        }
#>
    }

<#
    }
#>


}